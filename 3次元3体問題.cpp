#include <iostream>
#include <math.h>
#include <cmath>
#include <fstream>

const double t_0 = 0;
const double t_1 = 100000;
const double dt = 0.001;
const int N = (int)(0.1 / dt + 1);

const double A_0[7] = { 0,0,0.1,0,0,0,1 }; //初期値 { x座標,y座標,z座標,速度vx,速度vy,速度vz,質量m}
const double B_0[7] = { 10,0,0,0.5,1,0,2 };
const double C_0[7] = { -20,0,0,-1,-1,0,1 };

const double G = 30;

double A[2][9], B[2][9], C[2][9];   //{ x座標,y座標,z座標,速度vx,速度vy,速度vz,加速度ax,加速度ay,加速度az}

double a;

int cul();

double cul_a(double, double, double, double, double, double, double);

int main()
{
    std::ofstream ofs;
    ofs.open("data.txt", std::ios::out);

    for (int n = 0; n < 6; n++)
    {
        A[0][n] = A_0[n];
        A[1][n] = A_0[n];
        B[0][n] = B_0[n];
        B[1][n] = B_0[n];
        C[0][n] = C_0[n];
        C[1][n] = C_0[n];
    }

    int n = N;
    for (double t = t_0; t < t_1; t += dt)
    {
        if (n == N)
        {
            ofs << t << " " << A[0][0] << " " << A[0][1] << " " << A[0][2] << " " << std::flush;
            ofs << B[0][0] << " " << B[0][1] << " " << B[0][2] << " " << std::flush;
            ofs << C[0][0] << " " << C[0][1] << " " << C[0][2] << std::endl;
            n = 1;
        }
        n++;
        cul();
    }
    ofs.close();
    return 0;
}



int cul()
{
    A[0][6] = cul_a(A[0][0], A[0][1], A[0][2], B[0][0], B[0][1], B[0][2], B_0[6]) + cul_a(A[0][0], A[0][1], A[0][2], C[0][0], C[0][1], C[0][2], C_0[6]);
    A[0][7] = cul_a(A[0][1], A[0][2], A[0][0], B[0][1], B[0][2], B[0][0], B_0[6]) + cul_a(A[0][1], A[0][2], A[0][0], C[0][1], C[0][2], C[0][0], C_0[6]);
    A[0][8] = cul_a(A[0][2], A[0][0], A[0][1], B[0][2], B[0][0], B[0][1], B_0[6]) + cul_a(A[0][2], A[0][0], A[0][1], C[0][2], C[0][0], C[0][1], C_0[6]);
    B[0][6] = cul_a(B[0][0], B[0][1], B[0][2], C[0][0], C[0][1], C[0][2], C_0[6]) + cul_a(B[0][0], B[0][1], B[0][2], A[0][0], A[0][1], A[0][2], A_0[6]);
    B[0][7] = cul_a(B[0][1], B[0][2], B[0][0], C[0][1], C[0][2], C[0][0], C_0[6]) + cul_a(B[0][1], B[0][2], B[0][0], A[0][1], A[0][2], A[0][0], A_0[6]);
    B[0][8] = cul_a(B[0][2], B[0][0], B[0][1], C[0][2], C[0][0], C[0][1], C_0[6]) + cul_a(B[0][2], B[0][0], B[0][1], A[0][2], A[0][0], A[0][1], A_0[6]);
    C[0][6] = cul_a(C[0][0], C[0][1], C[0][2], A[0][0], A[0][1], A[0][2], A_0[6]) + cul_a(C[0][0], C[0][1], C[0][2], B[0][0], B[0][1], B[0][2], B_0[6]);
    C[0][7] = cul_a(C[0][1], C[0][2], C[0][0], A[0][1], A[0][2], A[0][0], A_0[6]) + cul_a(C[0][1], C[0][2], C[0][0], B[0][1], B[0][2], B[0][0], B_0[6]);
    C[0][8] = cul_a(C[0][2], C[0][0], C[0][1], A[0][2], A[0][0], A[0][1], A_0[6]) + cul_a(C[0][2], C[0][0], C[0][1], B[0][2], B[0][0], B[0][1], B_0[6]);

    A[1][0] = A[0][0] + (A[0][3] + A[0][6] * dt) * dt;
    A[1][1] = A[0][1] + (A[0][4] + A[0][7] * dt) * dt;
    A[1][2] = A[0][2] + (A[0][5] + A[0][8] * dt) * dt;
    B[1][0] = B[0][0] + (B[0][3] + B[0][6] * dt) * dt;
    B[1][1] = B[0][1] + (B[0][4] + B[0][7] * dt) * dt;
    B[1][2] = B[0][2] + (B[0][5] + B[0][8] * dt) * dt;
    C[1][0] = C[0][0] + (C[0][3] + C[0][6] * dt) * dt;
    C[1][1] = C[0][1] + (C[0][4] + C[0][7] * dt) * dt;
    C[1][2] = C[0][2] + (C[0][5] + C[0][8] * dt) * dt;

    A[0][6] = cul_a(A[0][0], A[0][1], A[0][2], B[0][0], B[0][1], B[0][2], B_0[6]) + cul_a(A[0][0], A[0][1], A[0][2], C[0][0], C[0][1], C[0][2], C_0[6]);
    A[0][7] = cul_a(A[0][1], A[0][2], A[0][0], B[0][1], B[0][2], B[0][0], B_0[6]) + cul_a(A[0][1], A[0][2], A[0][0], C[0][1], C[0][2], C[0][0], C_0[6]);
    A[0][8] = cul_a(A[0][2], A[0][0], A[0][1], B[0][2], B[0][0], B[0][1], B_0[6]) + cul_a(A[0][2], A[0][0], A[0][1], C[0][2], C[0][0], C[0][1], C_0[6]);
    B[0][6] = cul_a(B[0][0], B[0][1], B[0][2], C[0][0], C[0][1], C[0][2], C_0[6]) + cul_a(B[0][0], B[0][1], B[0][2], A[0][0], A[0][1], A[0][2], A_0[6]);
    B[0][7] = cul_a(B[0][1], B[0][2], B[0][0], C[0][1], C[0][2], C[0][0], C_0[6]) + cul_a(B[0][1], B[0][2], B[0][0], A[0][1], A[0][2], A[0][0], A_0[6]);
    B[0][8] = cul_a(B[0][2], B[0][0], B[0][1], C[0][2], C[0][0], C[0][1], C_0[6]) + cul_a(B[0][2], B[0][0], B[0][1], A[0][2], A[0][0], A[0][1], A_0[6]);
    C[0][6] = cul_a(C[0][0], C[0][1], C[0][2], A[0][0], A[0][1], A[0][2], A_0[6]) + cul_a(C[0][0], C[0][1], C[0][2], B[0][0], B[0][1], B[0][2], B_0[6]);
    C[0][7] = cul_a(C[0][1], C[0][2], C[0][0], A[0][1], A[0][2], A[0][0], A_0[6]) + cul_a(C[0][1], C[0][2], C[0][0], B[0][1], B[0][2], B[0][0], B_0[6]);
    C[0][8] = cul_a(C[0][2], C[0][0], C[0][1], A[0][2], A[0][0], A[0][1], A_0[6]) + cul_a(C[0][2], C[0][0], C[0][1], B[0][2], B[0][0], B[0][1], B_0[6]);

    A[1][6] = cul_a(A[1][0], A[1][1], A[1][2], B[1][0], B[1][1], B[1][2], B_0[6]) + cul_a(A[1][0], A[1][1], A[1][2], C[1][0], C[1][1], C[1][2], C_0[6]);
    A[1][7] = cul_a(A[1][1], A[1][2], A[1][0], B[1][1], B[1][2], B[1][0], B_0[6]) + cul_a(A[1][1], A[1][2], A[1][0], C[1][1], C[1][2], C[1][0], C_0[6]);
    A[1][8] = cul_a(A[1][2], A[1][0], A[1][1], B[1][2], B[1][0], B[1][1], B_0[6]) + cul_a(A[1][2], A[1][0], A[1][1], C[1][2], C[1][0], C[1][1], C_0[6]);
    B[1][6] = cul_a(B[1][0], B[1][1], B[1][2], C[1][0], C[1][1], C[1][2], C_0[6]) + cul_a(B[1][0], B[1][1], B[1][2], A[1][0], A[1][1], A[1][2], A_0[6]);
    B[1][7] = cul_a(B[1][1], B[1][2], B[1][0], C[1][1], C[1][2], C[1][0], C_0[6]) + cul_a(B[1][1], B[1][2], B[1][0], A[1][1], A[1][2], A[1][0], A_0[6]);
    B[1][8] = cul_a(B[1][2], B[1][0], B[1][1], C[1][2], C[1][0], C[1][1], C_0[6]) + cul_a(B[1][2], B[1][0], B[1][1], A[1][2], A[1][0], A[1][1], A_0[6]);
    C[1][6] = cul_a(C[1][0], C[1][1], C[1][2], A[1][0], A[1][1], A[1][2], A_0[6]) + cul_a(C[1][0], C[1][1], C[1][2], B[1][0], B[1][1], B[1][2], B_0[6]);
    C[1][7] = cul_a(C[1][1], C[1][2], C[1][0], A[1][1], A[1][2], A[1][0], A_0[6]) + cul_a(C[1][1], C[1][2], C[1][0], B[1][1], B[1][2], B[1][0], B_0[6]);
    C[1][8] = cul_a(C[1][2], C[1][0], C[1][1], A[1][2], A[1][0], A[1][1], A_0[6]) + cul_a(C[1][2], C[1][0], C[1][1], B[1][2], B[1][0], B[1][1], B_0[6]);

    A[1][3] = A[0][3] + (A[0][6] + A[1][6]) / 2 * dt;
    A[1][4] = A[0][4] + (A[0][7] + A[1][7]) / 2 * dt;
    A[1][5] = A[0][5] + (A[0][8] + A[1][8]) / 2 * dt;
    B[1][3] = B[0][3] + (B[0][6] + B[1][6]) / 2 * dt;
    B[1][4] = B[0][4] + (B[0][7] + B[1][7]) / 2 * dt;
    B[1][5] = B[0][5] + (B[0][8] + B[1][8]) / 2 * dt;
    C[1][3] = C[0][3] + (C[0][6] + C[1][6]) / 2 * dt;
    C[1][4] = C[0][4] + (C[0][7] + C[1][7]) / 2 * dt;
    C[1][5] = C[0][5] + (C[0][8] + C[1][8]) / 2 * dt;

    A[1][0] = A[0][0] + (A[0][3] + A[1][3]) / 2 * dt;
    A[1][1] = A[0][1] + (A[0][4] + A[1][4]) / 2 * dt;
    A[1][2] = A[0][2] + (A[0][5] + A[1][5]) / 2 * dt;
    B[1][0] = B[0][0] + (B[0][3] + B[1][3]) / 2 * dt;
    B[1][1] = B[0][1] + (B[0][4] + B[1][4]) / 2 * dt;
    B[1][2] = B[0][2] + (B[0][5] + B[1][5]) / 2 * dt;
    C[1][0] = C[0][0] + (C[0][3] + C[1][3]) / 2 * dt;
    C[1][1] = C[0][1] + (C[0][4] + C[1][4]) / 2 * dt;
    C[1][2] = C[0][2] + (C[0][5] + C[1][5]) / 2 * dt;

    A[0][0] = A[1][0];
    A[0][1] = A[1][1];
    A[0][2] = A[1][2];
    B[0][0] = B[1][0];
    B[0][1] = B[1][1];
    B[0][2] = B[1][2];
    C[0][0] = C[1][0];
    C[0][1] = C[1][1];
    C[0][2] = C[1][2];

    A[0][3] = A[1][3];
    A[0][4] = A[1][4];
    A[0][5] = A[1][5];
    B[0][3] = B[1][3];
    B[0][4] = B[1][4];
    B[0][5] = B[1][5];
    C[0][3] = C[1][3];
    C[0][4] = C[1][4];
    C[0][5] = C[1][5];

    return 0;
}

double cul_a(double x, double y, double z, double x_1, double y_1, double z_1, double m)
{
    a = (G * m * (x_1 - x)) / (((x - x_1) * (x - x_1) + (y - y_1) * (y - y_1) + (z - z_1) * (z - z_1)) * sqrt((x - x_1) * (x - x_1) + (y - y_1) * (y - y_1) + (z - z_1) * (z - z_1)));
    
    return a;
}
